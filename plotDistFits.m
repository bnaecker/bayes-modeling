function ds = plotDistFits(ds)
%
% function ds = plotDistFits(ds)
%
% Plots likelihood widths and the prior for each subject. This is analagous
% to Figure 4 in Stocker & Simoncelli 2006.
%
% (c) bnaecker@stanford.edu 24 Mar 2012

%% Plot for each subject
for subject = 1:ds.info.nSubjects
    ds.info.currentSubject = subject;
    
    %% Make figure, subplot for likelihood widths and prior
    ds.handles(subject).distFig = figure;
    set(ds.handles(subject).distFig, 'Name', ['Subject ' num2str(subject)], ...
        'Color', 'w', 'NumberTitle', 'off');
    ds.handles(subject).likeAx = subplot(121); hold on;
    ds.handles(subject).likeTitle = title('Likelihood h(c)');
    ds.handles(subject).likeXLab = xlabel('Contrast');
    ds.handles(subject).priorAx = subplot(122); hold on;
    ds.handles(subject).priorTitle = title('Prior');
    ds.handles(subject).priorXLab = xlabel('Speed (deg s^{-1})');
    
    %% Pretty up the axes
    set(ds.handles(subject).likeAx, 'XLim', [.04 1], 'YLim', [.5 3], ...
        'XScale', 'log', 'TickDir', 'out', 'FontSize', 12, 'FontName', 'Helvetica');
    set(ds.handles(subject).priorAx, 'XLim', [.4 13], 'YLim', [1e-14 10], ...
        'XScale', 'log', 'YScale', 'log', 'TickDir', 'out', ...
        'FontSize', 12, 'FontName', 'Helvetica');
    
    %% Plot likelihood and error bars, if requested
    set(ds.handles(subject).distFig, 'CurrentAxes', ds.handles(subject).likeAx);
    ds.handles(subject).likeLine = ...
        plot(ds.data(subject).testContrasts, ds.params(subject).likeWidth(1, :), ...
        'LineStyle', 'none', 'Marker', 's', 'MarkerSize', 5, 'MarkerEdgeColor', 'k', ...
        'MarkerFaceColor', 'k');
    if ds.flags.plotSmears
        ds.handles(subject).likeSEs = ...
            fill([ds.data(subject).testContrasts; flipud(ds.data(subject).testContrasts)], ...
            [ds.stats(subject).likeLB'; flipud(ds.stats(subject).likeUB')], ...
            .75 .* [1 1 1], 'FaceAlpha', .5, 'EdgeColor', 'none');
    end
    if ds.flags.fitLikeFun
        v = ver('curvefit');
        if isempty(v)
            ds.handles(subject).hLine = ...
                plot(ds.hOpt(subject).domain, ds.data(subject).hFunVals, ...
                'LineStyle', '--', 'Marker', 'none', 'Color', 'k');
        else
            ds.handles(subject).hLine = ...
                plot(ds.hOpt(subject).domain, ...
                ds.hOpt(subject).fitObj(ds.hOpt(subject).domain), ...
                'LineStyle', '--', 'Marker', 'none', 'Color', 'k');
        end
    end
    
    %% Plot priors and SEs, if requested
    set(ds.handles(subject).distFig, 'CurrentAxes', ds.handles(subject).priorAx);
    ds.handles(subject).priorLine = ...
        plot(ds.vTrans.iTransFun(ds.data(subject).refVels), ...
        ds.params(subject).prior(1, :), ...
        'LineStyle', 'none', 'Marker', 'o', 'MarkerSize', 5, 'MarkerEdgeColor', 'k', 'MarkerFaceColor', 'k');
    if ds.flags.plotSmears
        ds.handles(subject).priorSEs = ...
            fill(ds.vTrans.iTransFun([ds.data(subject).refVels; flipud(ds.data(subject).refVels)]), ...
            [ds.params(subject).prior(1, :)'; flipud(ds.stats(subject).priorUB(1, :)')], ...
            .75 .* [1 1 1], 'FaceAlpha', .5, 'EdgeColor', 'none');
        
        %% Plot resamples, if requested
        if ds.flags.plotStraps
            % Create figure, axes, and titles/labels
            ds.handles(subject).resampleFig = figure;
            set(ds.handles(subject).resampleFig, 'Name', ['Subject ' num2str(subject), ', resamples'], ...
                'Color', 'w', 'NumberTitle', 'off');
            ds.handles(subject).resampleLikeAx = subplot(121); hold on;
            ds.handles(subject).resampleLikeTitle = title('Likelihood h(c)');
            ds.handles(subject).resampleLikeXLab = xlabel('Contrast');
            ds.handles(subject).resamplePriorAx = subplot(122); hold on;
            ds.handles(subject).resamplePriorTitle = title('Prior');
            ds.handles(subject).resamplePriorXLab = xlabel('Speed (deg s^{-1})');
            
            % Pretty up axes
            set(ds.handles(subject).resampleLikeAx, 'XLim', [.04 1], 'YLim', [.5 3], 'XScale', 'log', ...
                'TickDir', 'out', 'FontSize', 12, 'FontName', 'Helvetica');
            set(ds.handles(subject).resamplePriorAx, 'XLim', [.4 13], 'YLim', [1e-14 2], 'XScale', 'log', ...
                'YScale', 'log', 'TickDir', 'out', 'FontSize', 12, 'FontName', 'Helvetica');
            
            % Plot each resampled likelihood
            set(ds.handles(subject).resampleFig, 'CurrentAxes', ds.handles(subject).resampleLikeAx);
            ds.handles(subject).resampleLikeLine = ...
                plot(ds.data(subject).testContrasts, ds.params(subject).likeWidth(1, :), ...
                'LineStyle', '--', 'LineWidth', 2, 'Marker', 'none', 'Color', [1 .5 .5]);
            if ds.flags.fitG
            else
                ds.handles(subject).resampleLikeLines = ...
                    plot(ds.data(subject).testContrasts * ones(1, size(ds.params(subject).hHat, 1)), ...
                    ds.params(subject).hHat' ./ ds.data(subject).G, ...
                    'LineStyle', '--', 'Marker', 'none', 'Color', .75 .* [1 1 1]);
            end
            
            % Plot each resampled prior
            set(ds.handles(subject).resampleFig, 'CurrentAxes', ds.handles(subject).resamplePriorAx);
            ds.handles(subject).resamplePriorLine = ...
                plot(ds.vTrans.iTransFun(ds.data(subject).refVels), ...
                ds.params(subject).prior(1, :), ...
                'LineStyle', '--', 'LineWidth', 2, 'Marker', 'none', 'Color', [1 .5 .5]);
            ds.handles(subject).resamplePriorLines = ...
                plot(ds.vTrans.iTransFun(ds.data(subject).refVels) * ones(1, ...
                size(ds.params(subject).prior, 1) - 1), ...
                ds.params(subject).prior(2:end, :)', ...
                'LineStyle', '--', 'Marker', 'none', 'Color', .75 .* [1 1 1]);
        end
    end
end

%% Organize
ds = orderDataStruct(ds);